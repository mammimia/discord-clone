generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id           String @id @default(uuid())
  userId       String @unique
  name         String
  imageUrl     String @db.Text
  email        String @db.Text

  servers      Server[]
  members      Member[]
  channels     Channel[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Server {
  id           String @id @default(uuid())
  name         String
  imageUrl     String @db.Text
  inviteCode   String @unique

  profileId    String
  profile      Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  @@index([profileId])

  members      Member[]
  channels     Channel[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id           String @id @default(uuid())
  role         MemberRole @default(GUEST)

  profileId    String
  profile      Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  @@index([profileId])

  serverId     String
  server       Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  @@index([serverId])

  messages     Message[]
  directMessages DirectMessage[]

  conversationInitiatorId Conversation[] @relation("memberOne")
  conversationRecipientId Conversation[] @relation("memberTwo")

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id           String @id @default(uuid())
  name         String
  type         ChannelType @default(TEXT)

  profileId    String
  profile      Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  @@index([profileId])

  serverId     String
  server       Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  @@index([serverId])

  messages     Message[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Message {
  id           String @id @default(uuid())
  content      String

  fileUrl      String? @db.Text

  memberId     String
  member       Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  @@index([memberId])

  channelId    String
  channel      Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  @@index([channelId])

  deleted      Boolean @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Conversation {
  id           String @id @default(uuid())

  memberOneId  String
  memberOne    Member @relation("memberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  @@index([memberOneId])

  memberTwoId  String
  memberTwo    Member @relation("memberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])

  messages     DirectMessage[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model DirectMessage {
  id           String @id @default(uuid())
  content      String

  fileUrl      String? @db.Text

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  @@index([conversationId])

  memberId     String
  member       Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  @@index([memberId])

  deleted      Boolean @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}